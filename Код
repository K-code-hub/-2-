#include <iostream>
#include <cmath>
#include <complex>

using namespace std;

const int N = 4;

void dft(double input[], complex<double> output[]) {
    for (int k = 0; k < N; k++) {
        output[k] = complex<double>(0, 0);
        for (int n = 0; n < N; n++) {
            double angle = -2 * M_PI * k * n / N;
            output[k] += input[n] * complex<double>(cos(angle), sin(angle));
        }
    }
}
int main() {
    double input[N] = {1, 0, -1, 0};
    complex<double> output[N];
    dft(input, output);
    cout << "DFT result:" << endl;
    for (int k = 0; k < N; k++) {
        cout << "X[" << k << "] = " << output[k].real() << " + " << output[k].imag() << "i" << endl;
    }
    return 0;
}
